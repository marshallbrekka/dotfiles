" In your .vimrc.bundles.local file"
" list only the plugin groups you will use
 if !exists('g:spf13_bundle_groups')
     let g:spf13_bundle_groups=['general', 'programming', 'ruby',
     'python', 'javascript', 'html', 'misc']
     endif

let g:indent_guides_enable_on_vim_startup = 0
let g:spf13_no_autochdir = 1
let g:autoclose_on = 0
let g:neocomplcache_enable_at_startup = 0
let g:ctrlp_regexp = 1
let g:ctrlp_switch_buffer = 0
let g:ctrlp_custom_ignore = {
     \ 'dir':  '\.git$\|\.hg$\|\.svn$',
     \ 'file': '\v\.(exe|so|dll|class|jar)$'}

" functions take from http://concisionandconcinnity.blogspot.com/2009/07/vim-part-ii-matching-pairs.html
inoremap ( ()<Left>
inoremap [ []<Left>
inoremap { {}<Left>
autocmd Syntax html,vim inoremap < <lt>><Left>

function! ClosePair(char)
    if getline('.')[col('.') - 1] == a:char
        return "\<Right>"
    else
        return a:char
    endif
endf

inoremap ) <c-r>=ClosePair(')')<CR>
inoremap ] <c-r>=ClosePair(']')<CR>
inoremap } <c-r>=ClosePair('}')<CR>

function! QuoteDelim(char)
    let line = getline('.')
    let col = col('.')
    if line[col - 2] == "\\"
        "Inserting a quoted quotation mark into the string
        return a:char
    elseif line[col - 1] == a:char
        "Escaping out of the string
        return "\<Right>"
    else
        "Starting a string
        return a:char.a:char."\<Left>"
    endif
endf

inoremap " <c-r>=QuoteDelim('"')<CR>
inoremap ' <c-r>=QuoteDelim("'")<CR>

vnoremap (  <ESC>`>a)<ESC>`<i(<ESC>
vnoremap )  <ESC>`>a)<ESC>`<i(<ESC>
vnoremap {  <ESC>`>a}<ESC>`<i{<ESC>
vnoremap }  <ESC>`>a}<ESC>`<i{<ESC>
vnoremap "  <ESC>`>a"<ESC>`<i"<ESC>
vnoremap '  <ESC>`>a'<ESC>`<i'<ESC>
vnoremap `  <ESC>`>a`<ESC>`<i`<ESC>
vnoremap [  <ESC>`>a]<ESC>`<i[<ESC>
vnoremap ]  <ESC>`>a]<ESC>`<i[<ESC>

function! InAnEmptyPair()
    let cur = strpart(getline('.'),getpos('.')[2]-2,2)
    for pair in (split(&matchpairs,',') + ['":"',"':'"])
        if cur == join(split(pair,':'),'')
            return 1
        endif
    endfor
    return 0
endfunc

func! DeleteEmptyPairs()
    if InAnEmptyPair()
        return "\<Left>\<Del>\<Del>"
    else
        return "\<BS>"
    endif
endfunc

inoremap <expr> <BS> DeleteEmptyPairs()


" Automatically determine indenting using fuzzy matching. e.g. the a line
" starting "(with-"
" will be indented two spaces.
let vimclojure#FuzzyIndent=1

" Highlight built-in functions from clojure.core and friends
let vimclojure#HighlightBuiltins=1

" Highlight functions from contrib
 let vimclojure#HighlightContrib=1

" As new symbols are identified using VimClojure's dynamic features, automatically
" highlight them.
let vimclojure#DynamicHighlighting=1

" Color parens so they're easier to match visually
let vimclojure#ParenRainbow=1

" Yes, I want nailgun support
 let vimclojure#WantNailgun = 1

" Full path to the nailgun client
 let vimclojure#NailgunClient = "/usr/bin/ng"")

let vimclojure#SplitPos = "bottom"

imap <c-k> <C-O>:call b:vimclojure_repl.upHistory()<CR>
imap <c-j> <C-O>:call b:vimclojure_repl.downHistory()<CR>
imap <c-e> <Esc>G$:call b:vimclojure_repl.enterHook()<CR>

